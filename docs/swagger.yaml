basePath: /
definitions:
  handlers.CreateUserRequestBody:
    properties:
      email:
        minLength: 3
        type: string
      name:
        maxLength: 255
        minLength: 4
        type: string
      password:
        maxLength: 255
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  handlers.PasswordRecoverLinkEmailHandler.request:
    properties:
      email:
        minLength: 3
        type: string
    required:
    - email
    type: object
  handlers.ResetPassword.request:
    properties:
      password:
        maxLength: 255
        minLength: 6
        type: string
      token:
        type: string
    required:
    - password
    type: object
  handlers.SessionRequestBody:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  handlers.SessionStart.response:
    properties:
      token:
        type: string
    type: object
  handlers.SessionsMe.response:
    properties:
      account:
        $ref: '#/definitions/models.Account'
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.Account:
    properties:
      account_id:
        type: integer
      email:
        type: string
    type: object
  models.Book:
    properties:
      id:
        type: integer
      isbn:
        type: string
      price:
        type: number
      quantity:
        type: integer
      title:
        type: string
    type: object
  models.EmailVerification:
    properties:
      code:
        type: string
    type: object
  models.User:
    properties:
      account:
        $ref: '#/definitions/models.Account'
      books:
        items:
          $ref: '#/definitions/models.Book'
        type: array
      id:
        type: integer
      name:
        type: string
      role:
        type: string
    type: object
host: localhost:8090
info:
  contact: {}
  description: A book management service API in Go using Gin framework.
  title: Gin Book Service
  version: "1.0"
paths:
  /private/admin/users:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Account'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
      - Bearer: []
      summary: List users
      tags:
      - Users
  /private/books:
    post:
      consumes:
      - application/json
      parameters:
      - description: book example
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Book'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
      - Bearer: []
      summary: Create a book
      tags:
      - Books
  /private/sessions/me:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.SessionsMe.response'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
      security:
      - Bearer: []
      summary: Get current session
      tags:
      - Sessions
  /public/books:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      summary: List books
      tags:
      - Books
  /public/sessions:
    post:
      consumes:
      - application/json
      parameters:
      - description: request example
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.SessionRequestBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.SessionStart.response'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      summary: Start a session
      tags:
      - Sessions
  /public/users:
    post:
      consumes:
      - application/json
      parameters:
      - description: request example
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateUserRequestBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      summary: Create account
      tags:
      - Users
  /public/users/email:
    post:
      consumes:
      - application/json
      parameters:
      - description: body example
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.EmailVerification'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      summary: Verify a user email
      tags:
      - Users
  /public/users/password:
    patch:
      consumes:
      - application/json
      parameters:
      - description: body example
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.ResetPassword.request'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      summary: Reset user password
      tags:
      - Users
  /public/users/password/recover:
    post:
      consumes:
      - application/json
      parameters:
      - description: body example
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handlers.PasswordRecoverLinkEmailHandler.request'
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      summary: Send password recover link to user email
      tags:
      - Users
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
